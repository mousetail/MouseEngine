namespace MouseEngine.Lowlevel
{
    enum opcodeType : int
    {
        nop = 0x00,
        add = 0x10,
        sub = 0x11,
        mul = 0x12,
        div = 0x13,
        mod = 0x14,
        neg = 0x15,
        bitand = 0x18,
        bitor = 0x19,
        bitxor = 0x1A,
        bitnot = 0x1B,
        shiftl = 0x1C,
        sshiftr = 0x1D,
        ushiftr = 0x1E,
        jump = 0x20,
        jz = 0x22,
        jnz = 0x23,
        jeq = 0x24,
        jne = 0x25,
        jlt = 0x26,
        jge = 0x27,
        jgt = 0x28,
        jle = 0x29,
        jltu = 0x2A,
        jgeu = 0x2B,
        jgtu = 0x2C,
        jleu = 0x2D,
        call = 0x30,
        returnf = 0x31,
        catchf = 0x32,
        throwf = 0x33,
        tailcall = 0x34,
        copy = 0x40,
        copys = 0x41,
        copyb = 0x42,
        sexs = 0x44,
        sexb = 0x45,
        aload = 0x48,
        aloads = 0x49,
        aloadb = 0x4A,
        aloadbit = 0x4B,
        astore = 0x4C,
        astores = 0x4D,
        astoreb = 0x4E,
        astorebit = 0x4F,
        stkcount = 0x50,
        stkpeek = 0x51,
        stkswap = 0x52,
        stkroll = 0x53,
        stkcopy = 0x54,
        streamchar = 0x70,
        streamnum = 0x71,
        streamstr = 0x72,
        streamunichar = 0x73,
        gestalt = 0x100,
        debugtrap = 0x101,
        getmemsize = 0x102,
        setmemsize = 0x103,
        jumpabs = 0x104,
        random = 0x110,
        setrandom = 0x111,
        quit = 0x120,
        verify = 0x121,
        restart = 0x122,
        save = 0x123,
        restore = 0x124,
        saveundo = 0x125,
        restoreundo = 0x126,
        protect = 0x127,
        glk = 0x130,
        getstringtbl = 0x140,
        setstringtbl = 0x141,
        getiosys = 0x148,
        setiosys = 0x149,
        linearsearch = 0x150,
        binarysearch = 0x151,
        linkedsearch = 0x152,
        callf = 0x160,
        callfi = 0x161,
        callfii = 0x162,
        callfiii = 0x163,
        mzero = 0x170,
        mcopy = 0x171,
        malloc = 0x178,
        mfree = 0x179,
        accelfunc = 0x180,
        accelparam = 0x181,
        numtof = 0x190,
        ftonumz = 0x191,
        ftonumn = 0x192,
        ceil = 0x198,
        floor = 0x199,
        fadd = 0x1A0,
        fsub = 0x1A1,
        fmul = 0x1A2,
        fdiv = 0x1A3,
        fmod = 0x1A4,
        sqrt = 0x1A8,
        exp = 0x1A9,
        log = 0x1AA,
        pow = 0x1AB,
        sin = 0x1B0,
        cos = 0x1B1,
        tan = 0x1B2,
        asin = 0x1B3,
        acos = 0x1B4,
        atan = 0x1B5,
        atan2 = 0x1B6,
        jfeq = 0x1C0,
        jfne = 0x1C1,
        jflt = 0x1C2,
        jfle = 0x1C3,
        jfgt = 0x1C4,
        jfge = 0x1C5,
        jisnan = 0x1C8,
        jisinf = 0x1C9
    }

    enum addressMode: byte
    {
        zero=0x0,
        constbyte=0x1,
        constshort=0x2,
        constint=0x3,
        unused=0x4,
        addrbyte=0x5,
        addrshort=0x6,
        addrint=0x7,
        stack=0x8,
        framebyte=0x9,
        frameshort=0xA,
        frameint=0xB,
        unused2=0xC,
        rambyte=0xD,
        ramshort=0xE,
        ramint=0xF

    }

    enum glkFunction: int
    {
        glk_exit = 0x0001,
        glk_set_interrupt_handler = 0x0002,
        glk_tick = 0x0003,
        glk_gestalt = 0x0004,
        glk_gestalt_ext = 0x0005,
        glk_window_iterate = 0x0020,
        glk_window_get_rock = 0x0021,
        glk_window_get_root = 0x0022,
        glk_window_open = 0x0023,
        glk_window_close = 0x0024,
        glk_window_get_size = 0x0025,
        glk_window_set_arrangement = 0x0026,
        glk_window_get_arrangement = 0x0027,
        glk_window_get_type = 0x0028,
        glk_window_get_parent = 0x0029,
        glk_window_clear = 0x002A,
        glk_window_move_cursor = 0x002B,
        glk_window_get_stream = 0x002C,
        glk_window_set_echo_stream = 0x002D,
        glk_window_get_echo_stream = 0x002E,
        glk_set_window = 0x002F,
        glk_window_get_sibling = 0x0030,
        glk_stream_iterate = 0x0040,
        glk_stream_get_rock = 0x0041,
        glk_stream_open_file = 0x0042,
        glk_stream_open_memory = 0x0043,
        glk_stream_close = 0x0044,
        glk_stream_set_position = 0x0045,
        glk_stream_get_position = 0x0046,
        glk_stream_set_current = 0x0047,
        glk_stream_get_current = 0x0048,
        glk_stream_open_resource = 0x0049,
        glk_fileref_create_temp = 0x0060,
        glk_fileref_create_by_name = 0x0061,
        glk_fileref_create_by_prompt = 0x0062,
        glk_fileref_destroy = 0x0063,
        glk_fileref_iterate = 0x0064,
        glk_fileref_get_rock = 0x0065,
        glk_fileref_delete_file = 0x0066,
        glk_fileref_does_file_exist = 0x0067,
        glk_fileref_create_from_fileref = 0x0068,
        glk_put_char = 0x0080,
        glk_put_char_stream = 0x0081,
        glk_put_string = 0x0082,
        glk_put_string_stream = 0x0083,
        glk_put_buffer = 0x0084,
        glk_put_buffer_stream = 0x0085,
        glk_set_style = 0x0086,
        glk_set_style_stream = 0x0087,
        glk_get_char_stream = 0x0090,
        glk_get_line_stream = 0x0091,
        glk_get_buffer_stream = 0x0092,
        glk_char_to_lower = 0x00A0,
        glk_char_to_upper = 0x00A1,
        glk_stylehint_set = 0x00B0,
        glk_stylehint_clear = 0x00B1,
        glk_style_distinguish = 0x00B2,
        glk_style_measure = 0x00B3,
        glk_select = 0x00C0,
        glk_select_poll = 0x00C1,
        glk_request_line_event = 0x00D0,
        glk_cancel_line_event = 0x00D1,
        glk_request_char_event = 0x00D2,
        glk_cancel_char_event = 0x00D3,
        glk_request_mouse_event = 0x00D4,
        glk_cancel_mouse_event = 0x00D5,
        glk_request_timer_events = 0x00D6,
        glk_image_get_info = 0x00E0,
        glk_image_draw = 0x00E1,
        glk_image_draw_scaled = 0x00E2,
        glk_window_flow_break = 0x00E8,
        glk_window_erase_rect = 0x00E9,
        glk_window_fill_rect = 0x00EA,
        glk_window_set_background_color = 0x00EB,
        glk_schannel_iterate = 0x00F0,
        glk_schannel_get_rock = 0x00F1,
        glk_schannel_create = 0x00F2,
        glk_schannel_destroy = 0x00F3,
        glk_schannel_create_ext = 0x00F4,
        glk_schannel_play_multi = 0x00F7,
        glk_schannel_play = 0x00F8,
        glk_schannel_play_ext = 0x00F9,
        glk_schannel_stop = 0x00FA,
        glk_schannel_set_volume = 0x00FB,
        glk_sound_load_hint = 0x00FC,
        glk_schannel_set_volume_ext = 0x00FD,
        glk_schannel_pause = 0x00FE,
        glk_schannel_unpause = 0x00FF,
        glk_set_hyperlink = 0x0100,
        glk_set_hyperlink_stream = 0x0101,
        glk_request_hyperlink_event = 0x0102,
        glk_cancel_hyperlink_event = 0x0103,
        glk_buffer_to_lower_case_uni = 0x0120,
        glk_buffer_to_upper_case_uni = 0x0121,
        glk_buffer_to_title_case_uni = 0x0122,
        glk_buffer_canon_decompose_uni = 0x0123,
        glk_buffer_canon_normalize_uni = 0x0124,
        glk_put_char_uni = 0x0128,
        glk_put_string_uni = 0x0129,
        glk_put_buffer_uni = 0x012A,
        glk_put_char_stream_uni = 0x012B,
        glk_put_string_stream_uni = 0x012C,
        glk_put_buffer_stream_uni = 0x012D,
        glk_get_char_stream_uni = 0x0130,
        glk_get_buffer_stream_uni = 0x0131,
        glk_get_line_stream_uni = 0x0132,
        glk_stream_open_file_uni = 0x0138,
        glk_stream_open_memory_uni = 0x0139,
        glk_stream_open_resource_uni = 0x013A,
        glk_request_char_event_uni = 0x0140,
        glk_request_line_event_uni = 0x0141,
        glk_set_echo_line_event = 0x0150,
        glk_set_terminators_line_event = 0x0151,
        glk_current_time = 0x0160,
        glk_current_simple_time = 0x0161,
        glk_time_to_date_utc = 0x0168,
        glk_time_to_date_local = 0x0169,
        glk_simple_time_to_date_utc = 0x016A,
        glk_simple_time_to_date_local = 0x016B,
        glk_date_to_time_utc = 0x016C,
        glk_date_to_time_local = 0x016D,
        glk_date_to_simple_time_utc = 0x016E,
        glk_date_to_simple_time_local = 0x016F
    }

    static class OpcodeTools
    {
        public static byte[] toBytes(this opcodeType d)
        {
            int f = (int)d;
            if (f <= 0x7F)
            {
                return new byte[] { (byte)f };
            }
            else if (f <= 0x3FFF)
            {
                byte[] b = Writer.toBytes(f);
                return new byte[2] { (byte)(b[2] + 0x80), b[3] };
            }
            else
            {
                byte[] b = Writer.toBytes(f);
                return new byte[4] { (byte)(b[0] + 0xC0), b[1], b[2], b[3] };
            }
        }
        //public static byte[] tooBytes
    }
}